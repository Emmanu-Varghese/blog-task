require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do
  let!(:user) { create(:user) }
  let!(:article) { create(:article) }
  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { body: Faker::Lorem.words(number: rand(2..10)).join(" "),
      article_id: article.id,
      user_id: user.id }
  }

  let(:invalid_attributes) {
    { article_id: nil,
      body: nil,
      user_id: user.id }
  }

  describe "GET /new" do
    before do
      sign_in user
    end

    it "renders a successful response" do
      get new_article_comment_url(article)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    before do
      sign_in user
    end

    it "renders a successful response" do
      comment = Comment.create! valid_attributes
      get edit_article_comment_url(article, comment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    before do
      sign_in user
    end

    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post article_comments_url(article), params: { comment: valid_attributes }
        }.to change(Comment, :count).by(1)
      end

      it "redirects to the created comment" do
        post article_comments_url(article), params: { comment: valid_attributes }
        expect(response).to redirect_to(article_comments_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post article_comments_url(article), params: { comment: invalid_attributes }
        }.to change(Comment, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post article_comments_url(article), params: { comment: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "PATCH /update" do
    before do
      sign_in user
    end

    context "with valid parameters" do
      let(:new_attributes) {
        { body: Faker::Lorem.words(number: rand(2..10)).join(" "),
          article_id: article.id,
          user_id: user.id }
      }

      it "updates the requested comment" do
        comment = Comment.create! valid_attributes
        patch article_comment_url(article, comment), params: { comment: new_attributes }
        comment.reload
        expect(assigns(:comment).attributes["commentable_id"]).to match(new_attributes[:commentable_id])
      end

      it "redirects to the comment" do
        comment = Comment.create! valid_attributes
        patch article_comment_url(article, comment), params: { comment: new_attributes }
        comment.reload
        expect(response).to redirect_to(article_comments_url(article))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        comment = Comment.create! valid_attributes
        patch article_comment_url(article, comment), params: { comment: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    before do
      sign_in user
    end

    it "destroys the requested comment" do
      comment = Comment.create! valid_attributes
      expect {
        delete article_comment_url(article, comment)
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      comment = Comment.create! valid_attributes
      delete article_comment_url(article, comment)
      expect(response).to redirect_to(article_comments_url(article))
    end
  end
end
